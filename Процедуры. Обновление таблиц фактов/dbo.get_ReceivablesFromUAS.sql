SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

IF OBJECT_ID('[dbo].[get_ReceivablesFromUAS]','TF') IS NOT NULL
	DROP FUNCTION [dbo].[get_ReceivablesFromUAS]
GO

-- =============================================
-- Author:		<Author,,Valentin Avramko>
-- Create date: <Create Date,,04.01.2015>
-- Description:	<Description,,Возвращает талблицу с дебиторской задолженностью контрагентов на дату>
-- =============================================
CREATE FUNCTION [dbo].[get_ReceivablesFromUAS]
(
	@Date AS date		-- Дата, на которую формируем отчет	
)
RETURNS 
@tReceivables TABLE 
(
	Организация binary(16) NOT NULL
	,НаправлениеБизнеса binary(16) NOT NULL
	,Филиал binary(16) NOT NULL
	,ТипКонтрагента int NOT NULL
	,Контрагент binary(16) NOT NULL
	,ВидДокумента int NOT NULL
	,ТипДокументаПродажи int
	,ДокументВзаиморасчета binary(16)
	,ВидДолга int NOT NULL
	,ВидПросрочки int NOT NULL
	,ДнейПросрочки int NOT NULL

	--Для проверки расчетов
	--,Сворачивать int
	--,НачальнаяСумма numeric(15, 2)
	--,НакопительнаяСумма numeric(15, 2)
	--,ОстатокАвансаПоПросрочке numeric(15, 2)
	--,ОстатокАванса numeric(15, 2)

	,Сумма_0 numeric(15, 2) NOT NULL	-- все авансы свернуты до одной строки, долги контрагента остаются как есть
	,Сумма_1 numeric(15, 2) NOT NULL	-- все авансы свернуты до одной строки, просрочненные долги контрагента закрываются имеющимися  авансами
	,Сумма_2 numeric(15, 2) NOT NULL	-- все авансы свернуты до одной строки, все долги контрагента закрываются имеющимися авансами
	,Сумма_3 numeric(15, 2) NOT NULL	-- Организация, Направление бизнеса и Филиал не учитываются, все авансы свернуты до одной строки, просрочненные долги контрагента закрываются имеющимися  авансами
)
AS
BEGIN

DECLARE @DateOfSummation AS date

SET @DateOfSummation = ISNULL((	SELECT TOP 1
									_Период
								FROM [uas_central].dbo.РегистрНакопления_ВзаиморасчетыСКонтрагентами_Остатки
								GROUP BY _Период
								HAVING _Период < @Date
								ORDER BY _Период DESC
								), @Date)

;
WITH Взаиморасчеты AS
(
SELECT
	ВзаиморасчетыИтоги.НаправлениеБизнеса AS НаправлениеБизнеса
	,ВзаиморасчетыИтоги.Организация AS Организация
	,ВзаиморасчетыИтоги.Филиал AS Филиал
	,ВзаиморасчетыИтоги.Контрагент AS Контрагент
	,Контрагенты.ИНН AS ИНН
	,CASE
		WHEN Контрагенты.Ссылка IN (SELECT
										Sections.Контрагент
									FROM (	SELECT
												MAX(_Период) AS Дата
												,Контрагент AS Контрагент
											FROM [uas_central].dbo.РегистрСведений_ИсторияПереводаВСБ
											WHERE Активность = 0x01
											GROUP BY Контрагент
											) AS Sections
									INNER JOIN [uas_central].dbo.РегистрСведений_ИсторияПереводаВСБ AS Регистр ON Регистр._Период = Sections.Дата AND Регистр.Контрагент = Sections.Контрагент
									INNER JOIN [uas_central].dbo.Перечисление_ВидыОперацийПереводаВСБ AS Статус ON Статус.Значение = Регистр.Статус AND Статус.Имя = 'ПереводВСБ') THEN 0
		ELSE ТипыКонтрагента.Код
	END AS ТипКонтрагента
	,DocumentsTypes.ID AS ВидДокумента
	,ВзаиморасчетыИтоги.ДокументВзаиморасчета_Ссылка AS ДокументВзаиморасчета
	,ВзаиморасчетыИтоги.Сумма AS Сумма
FROM [uas_central].dbo.РегистрНакопления_ВзаиморасчетыСКонтрагентами_Остатки AS ВзаиморасчетыИтоги
INNER JOIN [uas_central].dbo.Справочник_Контрагенты AS Контрагенты ON Контрагенты.Ссылка = ВзаиморасчетыИтоги.Контрагент
														AND Контрагенты.Покупатель = 0x01
LEFT JOIN [uas_central].dbo.Справочник_ТипыКонтрагента AS ТипыКонтрагента ON ТипыКонтрагента.Ссылка = Контрагенты.ТипКонтрагента
INNER JOIN [ReportingDatabase].dbo.t_DocumentsTypes AS DocumentsTypes ON DocumentsTypes.UID_1C = ВзаиморасчетыИтоги.ДокументВзаиморасчета_ВидСсылки
WHERE ВзаиморасчетыИтоги._Период = @DateOfSummation
UNION ALL
SELECT
	ВзаиморасчетыОбороты.НаправлениеБизнеса AS НаправлениеБизнеса
	,ВзаиморасчетыОбороты.Организация AS Организация
	,ВзаиморасчетыОбороты.Филиал AS Филиал
	,ВзаиморасчетыОбороты.Контрагент AS Контрагент
	,Контрагенты.ИНН AS ИНН
	,CASE
		WHEN Контрагенты.Ссылка IN (SELECT
										Sections.Контрагент
									FROM (	SELECT
												MAX(_Период) AS Дата
												,Контрагент AS Контрагент
											FROM [uas_central].dbo.РегистрСведений_ИсторияПереводаВСБ
											WHERE Активность = 0x01
											GROUP BY Контрагент
											) AS Sections
									INNER JOIN [uas_central].dbo.РегистрСведений_ИсторияПереводаВСБ AS Регистр ON Регистр._Период = Sections.Дата AND Регистр.Контрагент = Sections.Контрагент
									INNER JOIN [uas_central].dbo.Перечисление_ВидыОперацийПереводаВСБ AS Статус ON Статус.Значение = Регистр.Статус AND Статус.Имя = 'ПереводВСБ') THEN '000000000'
		ELSE ТипыКонтрагента.Код
	END AS ТипКонтрагента
	,DocumentsTypes.ID AS ВидДокумента
	,ВзаиморасчетыОбороты.ДокументВзаиморасчета_Ссылка AS ДокументВзаиморасчета
	,(1 - 2*ВзаиморасчетыОбороты.ВидДвижения) * ВзаиморасчетыОбороты.Сумма AS Сумма
FROM [uas_central].dbo.РегистрНакопления_ВзаиморасчетыСКонтрагентами AS ВзаиморасчетыОбороты
INNER JOIN [uas_central].dbo.Справочник_Контрагенты AS Контрагенты ON Контрагенты.Ссылка = ВзаиморасчетыОбороты.Контрагент
														AND Контрагенты.Покупатель = 0x01
LEFT JOIN [uas_central].dbo.Справочник_ТипыКонтрагента AS ТипыКонтрагента ON ТипыКонтрагента.Ссылка = Контрагенты.ТипКонтрагента
INNER JOIN [ReportingDatabase].dbo.t_DocumentsTypes AS DocumentsTypes ON DocumentsTypes.UID_1C = ВзаиморасчетыОбороты.ДокументВзаиморасчета_ВидСсылки
WHERE (ВзаиморасчетыОбороты._Период >= @DateOfSummation AND ВзаиморасчетыОбороты._Период < DATEADD(day, 1, @Date))
	AND ВзаиморасчетыОбороты.Активность = 0x01
)
,ВзаиморасчетыПоДокументам AS
(
SELECT
	Взаиморасчеты.Организация
	,Взаиморасчеты.НаправлениеБизнеса
	,Взаиморасчеты.Филиал
	,Взаиморасчеты.ТипКонтрагента
	,Взаиморасчеты.Контрагент
	,Взаиморасчеты.ИНН
	,Взаиморасчеты.ВидДокумента
	,SalesDocumentsType.ID AS ТипДокументаПродажи
	,Взаиморасчеты.ДокументВзаиморасчета
	,Docs.ДатаОплаты AS ДатаОплаты
	,Взаиморасчеты.Сумма
FROM Взаиморасчеты AS Взаиморасчеты
INNER JOIN (SELECT
				Ссылка AS Ссылка
				,ISNULL(ДатаОплаты, Дата) AS ДатаОплаты
				,ТипДокумента AS ТипДокумента
			FROM [uas_central].dbo.Документ_РеализацияТоваров
			UNION ALL
			SELECT	
				Ссылка AS Ссылка
				,ISNULL(Дата, 0 ) AS ДатаОплаты
				,ТипДокумента AS ТипДокумента
			FROM [uas_central].dbo.Документ_ВозвратТоваровОтПокупателя
			UNION ALL
			SELECT			
				Ссылка AS Ссылка
				,ISNULL(ДатаОплаты, ДатаИсходногоДокумента) AS ДатаОплаты
				,ТипДокумента AS ТипДокумента
			FROM [uas_central].dbo.Документ_ВводНачальныхОстатковВзаиморасчета
			WHERE ВидДокумента NOT IN (	'Поступление товаров и услуг'
										,'Возврат товаров поставщику'
										,'Отчет комитенту о продажах товаров')
			UNION ALL
			SELECT
				0x00000000000000000000000000000000 AS Ссылка
				,0 AS ДатаОплаты
				,NULL AS ТипДокумента
		) AS Docs ON Docs.Ссылка = Взаиморасчеты.ДокументВзаиморасчета
LEFT JOIN [ReportingDatabase].dbo.t_SalesDocumentsType AS SalesDocumentsType ON SalesDocumentsType.UID_1C = Docs.ТипДокумента
)
,СвернутыеАвансы AS
(
SELECT
	ВзаиморасчетыПоДокументам.Организация
	,ВзаиморасчетыПоДокументам.НаправлениеБизнеса
	,ВзаиморасчетыПоДокументам.Филиал
	,ВзаиморасчетыПоДокументам.ТипКонтрагента
	,ВзаиморасчетыПоДокументам.Контрагент
	,ВзаиморасчетыПоДокументам.ИНН
	,IIF(SUM(ВзаиморасчетыПоДокументам.Сумма) < 0, 0x00000000, ВзаиморасчетыПоДокументам.ВидДокумента) AS ВидДокумента
	,IIF(SUM(ВзаиморасчетыПоДокументам.Сумма) < 0, NULL, ВзаиморасчетыПоДокументам.ТипДокументаПродажи) AS ТипДокументаПродажи
	,IIF(SUM(ВзаиморасчетыПоДокументам.Сумма) < 0, 0x00000000000000000000000000000000, ВзаиморасчетыПоДокументам.ДокументВзаиморасчета) AS ДокументВзаиморасчета
	,IIF(SUM(ВзаиморасчетыПоДокументам.Сумма) < 0, 0, ISNULL(ВзаиморасчетыПоДокументам.ДатаОплаты, 0)) AS ДатаОплаты
	,SUM(ВзаиморасчетыПоДокументам.Сумма) AS Сумма
FROM ВзаиморасчетыПоДокументам AS ВзаиморасчетыПоДокументам
GROUP BY
	ВзаиморасчетыПоДокументам.Организация
	,ВзаиморасчетыПоДокументам.НаправлениеБизнеса
	,ВзаиморасчетыПоДокументам.Филиал
	,ВзаиморасчетыПоДокументам.ТипКонтрагента
	,ВзаиморасчетыПоДокументам.Контрагент
	,ВзаиморасчетыПоДокументам.ИНН
	,ВзаиморасчетыПоДокументам.ВидДокумента
	,ВзаиморасчетыПоДокументам.ТипДокументаПродажи
	,ВзаиморасчетыПоДокументам.ДокументВзаиморасчета
	,ВзаиморасчетыПоДокументам.ДатаОплаты
HAVING SUM(ВзаиморасчетыПоДокументам.Сумма) <> 0
)
,Долги AS
(
SELECT
	СвернутыеАвансы.Организация
	,СвернутыеАвансы.НаправлениеБизнеса
	,СвернутыеАвансы.Филиал
	,СвернутыеАвансы.ТипКонтрагента
	,СвернутыеАвансы.Контрагент
	,СвернутыеАвансы.ВидДокумента
	,СвернутыеАвансы.ТипДокументаПродажи
	,СвернутыеАвансы.ДокументВзаиморасчета
	,СвернутыеАвансы.ДатаОплаты AS ДатаОплаты
	,IIF(SUM(СвернутыеАвансы.Сумма) > 0
			,IIF(СвернутыеАвансы.ДатаОплаты < @Date
					AND СвернутыеАвансы.ТипКонтрагента NOT IN (1, 2)
					AND СвернутыеАвансы.ИНН NOT IN (SELECT ИНН FROM [uas_central].dbo.Справочник_Организации)
						,2	-- Просрочено
						,3)	-- Не просрочено
		,	1)	-- Аванс
	AS ВидДолгаДляОтчета
	,IIF(SUM(СвернутыеАвансы.Сумма) > 0
			,IIF(СвернутыеАвансы.ДатаОплаты < @Date
					OR (СвернутыеАвансы.ТипКонтрагента IN (1, 2)
					OR СвернутыеАвансы.ИНН IN (SELECT ИНН FROM [uas_central].dbo.Справочник_Организации))
						,2	-- Просрочено
						,3)	-- Не просрочено
		,	1)	-- Аванс
	AS ВидДолга
	,IIF(SUM(СвернутыеАвансы.Сумма) > 0
			,IIF(СвернутыеАвансы.ТипКонтрагента IN (1, 2)
				OR СвернутыеАвансы.ИНН IN (SELECT ИНН FROM [uas_central].dbo.Справочник_Организации)
				,1
				,IIF(СвернутыеАвансы.ДатаОплаты < @Date, 1, 0))
			,1)	-- Аванс
	AS Сворачивать
	,SUM(СвернутыеАвансы.Сумма) AS Сумма
FROM СвернутыеАвансы AS СвернутыеАвансы
GROUP BY
	СвернутыеАвансы.Организация
	,СвернутыеАвансы.НаправлениеБизнеса
	,СвернутыеАвансы.Филиал
	,СвернутыеАвансы.ТипКонтрагента
	,СвернутыеАвансы.Контрагент
	,СвернутыеАвансы.ИНН
	,СвернутыеАвансы.ВидДокумента
	,СвернутыеАвансы.ТипДокументаПродажи
	,СвернутыеАвансы.ДокументВзаиморасчета
	,СвернутыеАвансы.ДатаОплаты
HAVING SUM(СвернутыеАвансы.Сумма) <> 0
)
,ДебиторскаяЗадолженность AS
(
SELECT
	Долги.Организация
	,Долги.НаправлениеБизнеса
	,Долги.Филиал
	,Долги.ТипКонтрагента
	,Долги.Контрагент
	,Долги.ВидДокумента
	,Долги.ТипДокументаПродажи
	,Долги.ДокументВзаиморасчета
	,Долги.ВидДолгаДляОтчета
	,CASE
		WHEN Долги.ВидДолга = 1 THEN 1							-- Аванс
		WHEN Долги.ВидДолга = 3 THEN 2							-- Не просрочено
		WHEN Долги.ВидДолга = 2 THEN (	SELECT TOP 1			-- Просрочено
											ID
										FROM dbo.t_TypesOfDelay
										WHERE IIF(DATEDIFF(dd, Долги.ДатаОплаты, @Date) < 0, 0, DATEDIFF(dd, Долги.ДатаОплаты, @Date)) BETWEEN MinDay AND MaxDay)
	END AS ВидПросрочки
	,CASE
		WHEN Долги.ВидДолга = 1 THEN 0																							-- Аванс
		WHEN Долги.ВидДолга = 3 THEN 0																							-- Не просрочено
		WHEN Долги.ВидДолга = 2 THEN IIF(DATEDIFF(dd, Долги.ДатаОплаты, @Date) < 0, 0, DATEDIFF(dd, Долги.ДатаОплаты, @Date))	-- Просрочено
	END AS ДнейПросрочки
	
	-- Для проверки расчета
	--,Долги.Сворачивать
	--,Долги.Сумма AS НачальнаяСумма
	--,SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
	--						ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) AS НакопительнаяСумма
	--,SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент, Долги.Сворачивать) AS ОстатокАвансаПоПросрочке
	--,SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент) AS ОстатокАванса

	,Долги.Сумма AS Сумма_0
	,CASE
		WHEN Долги.ВидДолга = 1 THEN
									CASE
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент, Сворачивать) >= 0 THEN 0
										ELSE SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент, Сворачивать)
									END
		WHEN Долги.ВидДолга = 2 THEN
									CASE
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) <=0 THEN 0
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																		ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) > Долги.Сумма THEN Долги.Сумма
										ELSE SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING)
									END
		WHEN Долги.ВидДолга = 3 THEN Долги.Сумма
	END AS Сумма_1
	,CASE
		WHEN Долги.ВидДолга = 1 THEN
									CASE
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент) >= 0 THEN 0
										ELSE SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент)
									END
		WHEN Долги.ВидДолга = 2 THEN
									CASE
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) <= 0 THEN 0
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) > Долги.Сумма THEN Долги.Сумма
										ELSE SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING)
									END
		WHEN Долги.ВидДолга = 3 THEN
									CASE
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) <= 0 THEN 0
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) > Долги.Сумма THEN Долги.Сумма
										ELSE SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Организация, Долги.НаправлениеБизнеса, Долги.Филиал, Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING)
									END
	END AS Сумма_2
	,CASE
		WHEN Долги.ВидДолга = 1 THEN
									CASE
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Контрагент, Сворачивать) >= 0 THEN 0
										ELSE SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Контрагент, Сворачивать)
									END
		WHEN Долги.ВидДолга = 2 THEN
									CASE
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) <=0 THEN 0
										WHEN SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Контрагент
																		ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING) > Долги.Сумма THEN Долги.Сумма
										ELSE SUM(Долги.Сумма) OVER(	PARTITION BY Долги.Контрагент
																	ORDER BY Долги.ДатаОплаты ROWS UNBOUNDED PRECEDING)
									END
		WHEN Долги.ВидДолга = 3 THEN Долги.Сумма
	END AS Сумма_3
FROM Долги AS Долги
)
INSERT INTO @tReceivables
	SELECT
		*
	FROM ДебиторскаяЗадолженность
	WHERE Сумма_0 <> 0
		OR Сумма_1 <> 0
		OR Сумма_2 <> 0
		OR Сумма_3 <> 0
	
RETURN
 
END
GO